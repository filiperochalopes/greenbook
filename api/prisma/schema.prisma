// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Specie {
  id                          Int                                 @id @default(autoincrement())
  name                        String
  description                 String                              @db.Text
  createdAt                   DateTime                            @default(now())
  updatedAt                   DateTime                            @updatedAt
  prescriptions               PrescriptionSuggestion[]
  popularNames                PopularName[]
  therapeuticEffects          TherapeuticEffect[]
  therapeuticEffectsRelevance SpecieTherapeuticEffectsRelevance[]
  metabolites                 SecondaryMetabolismDerivatives[]
  metabolitesRelevance        SpecieMetabolitesRelevance[]
}

model PopularName {
  id          Int      @id @default(autoincrement())
  name        String
  observation String
  specie      Specie[]
}

model PlantPart {
  id            Int                      @id @default(autoincrement())
  name          String
  description   String
  prescriptions PrescriptionSuggestion[]
}

// todo os efeitos terapêuticos devem estar relacionados com os metabólitos, se possível, apesar de não ter evidências para todas as ligações ainda seria algo para se pensar
model TherapeuticEffect {
  id               Int                                 @id @default(autoincrement())
  term             String
  meaning          String
  species          Specie[]
  speciesRelevance SpecieTherapeuticEffectsRelevance[]
}

model SecondaryMetabolismDerivatives {
  id               Int                          @id @default(autoincrement())
  name             String
  description      String                       @db.Text
  species          Specie[]
  speciesRelevance SpecieMetabolitesRelevance[]
}

model Relevance {
  level                            String                              @id
  description                      String
  hexColor                         String
  specieMetabolitesRelevance       SpecieMetabolitesRelevance[]
  specieTherapeuticEffectRelevance SpecieTherapeuticEffectsRelevance[]
}

model SpecieMetabolitesRelevance {
  specie     Specie                         @relation(fields: [specieId], references: [id])
  metabolite SecondaryMetabolismDerivatives @relation(fields: [metaboliteId], references: [id])
  relevance  Relevance                      @relation(fields: [relevanceLevel], references: [level])

  specieId       Int
  metaboliteId   Int
  relevanceLevel String

  @@id([specieId, metaboliteId, relevanceLevel])
  @@map("_SpecieMetabolitesRelevance")
}

model SpecieTherapeuticEffectsRelevance {
  specie            Specie            @relation(fields: [specieId], references: [id])
  therapeuticEffect TherapeuticEffect @relation(fields: [therapeuticEffectId], references: [id])
  relevance         Relevance         @relation(fields: [relevanceLevel], references: [level])

  specieId            Int
  therapeuticEffectId Int
  relevanceLevel      String

  @@id([specieId, therapeuticEffectId, relevanceLevel])
  @@map("_SpecieTherapeuticEffectsRelevance")
}

model HerbalPreparation {
  id               Int    @id @default(autoincrement())
  name             String
  description      String
  prescriptionBase String
}

model PrescriptionSuggestion {
  id          Int       @id @default(autoincrement())
  specie      Specie    @relation(fields: [specieId], references: [id])
  part        PlantPart @relation(fields: [plantPartId], references: [id])
  dosage      String
  quantity    String
  description String
  specieId    Int
  plantPartId Int
}
